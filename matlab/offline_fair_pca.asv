function [V, logs] = offline_fair_pca(params, T, trues, settings)
    % unpack parameters
    [d, k, r, M_R, B, B_Q, mode] = params{:};
    [V_true, R_true, f_true, Sigma_gap] = trues{:};
    [~, ~, Sigma0, Sigma1, ~, Sigma, mu_true, V_nonfair] = settings{:};    
    
    logs = zeros(4,T);

    % % learning rates (for Oja's method)
    % alpha = 1.5;
    % beta = 0.5;

    V = orth(randn(d, k));
    R = orth(randn(d, r));    % column space of Sigma_gap
    
    % warm-up stage
    T_warmup = 1;
    for t = 1:T_warmup
        [R, ~] = qr(Sigma_gap*R, "econ");
    end
    
    for t = 1:T
        [R, ~] = qr(Sigma_gap*R, "econ");

        [C, ~] = qr([R f_true], "econ");
        N = eye(d) - C*C';
        [V, ~] = qr(N'*Sigma*N*V, "econ");

        % logging
        logs(1,t) = 100*trace(V'*Sigma*V) / trace(V_nonfair'*Sigma*V_nonfair);
        logs(2,t) = norm(V'*f_true, 'fro');
        logs(3,t) = norm(V'*Sigma_gap*V, 'fro');
        logs(4,t) = norm(R_true*R_true' - R*R', 'fro');
    end
end